JOB timestamp: Mon Dec 18 15:28:05 MST 2023
JOB ID: 121633
Array Task ID: 22
Current directory: /lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src
r3i4n10
gcc (Spack GCC) 12.1.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Python 3.11.5
/lfs/koff9454.ui/miniconda3/envs/plc/bin/python
matiec version 0.1
changeset id: 
Number of programs: 3
Programs: condition_1 condition_2 condition_3
Fuzzing program: condition_2, Job ID: 22
input dir exist, skipping
harness file exist, skipping
Running the fuzzers
Workdir: "/lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src/programs/condition/condition_2/runs/run-22"
Out dir at "fuzzer-outdir" already exists.
Let's fuzz :)
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 2 runnable tasks (utilization: 6%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #1.[0m
[1;94m[*] [0mScanning 'our-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 74[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'our-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 80 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 6 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:variables.txt'...[0m
[1;90m    len = 560, map size = 20, exec speed = 6251 us, hash = fe825d59491019c6
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m20 to 20 bits (average: 20.00 bits)
[1;90m        Exec timing : [0m6251 to 6251 us (average: 6251 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 40 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=6251, hits=0, map=20, ascii=0, run_time=0:00:00:00)...[0m
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 4 runnable tasks (utilization: 11%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #12.[0m
[1;94m[*] [0mScanning 'afl-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 74[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'afl-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 80 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 6 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:testcase.txt'...[0m
[1;90m    len = 3, map size = 19, exec speed = 6398 us, hash = ca589d48df9abc58
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m19 to 19 bits (average: 19.00 bits)
[1;90m        Exec timing : [0m6398 to 6398 us (average: 6398 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 40 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=6398, hits=0, map=19, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=10, favorite=1, was_fuzzed=1, exec_us=6398, hits=0, map=19, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #1 (15 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=5385, hits=763, map=20, ascii=0, run_time=0:00:01:18)...[0m
[1;94m[*] [0mFuzzing test case #13 (15 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=23, favorite=1, was_fuzzed=0, exec_us=2940, hits=2, map=19, ascii=0, run_time=0:00:01:18)...[0m
[1;94m[*] [0mFuzzing test case #15 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1969, hits=3, map=19, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #9 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=10, favorite=1, was_fuzzed=0, exec_us=3510, hits=23, map=19, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #2 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=5, favorite=1, was_fuzzed=0, exec_us=4979, hits=283, map=19, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #15 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=517, weight=99, favorite=1, was_fuzzed=1, exec_us=1969, hits=6, map=19, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #2 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=2, favorite=1, was_fuzzed=1, exec_us=4979, hits=581, map=19, ascii=0, run_time=0:00:01:47)...[0m
[1;94m[*] [0mFuzzing test case #17 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1254, hits=3, map=19, ascii=0, run_time=0:00:01:48)...[0m
[1;94m[*] [0mFuzzing test case #17 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=919, weight=21, favorite=1, was_fuzzed=1, exec_us=1254, hits=3, map=19, ascii=0, run_time=0:00:01:48)...[0m
[1;94m[*] [0mFuzzing test case #19 (24 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1198, hits=103, map=24, ascii=0, run_time=0:00:01:52)...[0m
[1;94m[*] [0mFuzzing test case #17 (24 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=9, favorite=1, was_fuzzed=1, exec_us=1254, hits=89, map=19, ascii=0, run_time=0:00:01:52)...[0m
[1;94m[*] [0mFuzzing test case #13 (24 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=5, favorite=1, was_fuzzed=1, exec_us=2940, hits=17, map=19, ascii=0, run_time=0:00:02:15)...[0m
[1;94m[*] [0mFuzzing test case #19 (24 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=20, favorite=1, was_fuzzed=1, exec_us=1198, hits=108, map=24, ascii=0, run_time=0:00:02:16)...[0m
[1;94m[*] [0mFuzzing test case #15 (25 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=74, favorite=1, was_fuzzed=1, exec_us=1969, hits=17, map=19, ascii=0, run_time=0:00:02:17)...[0m
[1;94m[*] [0mFuzzing test case #19 (27 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=19, favorite=1, was_fuzzed=1, exec_us=1198, hits=168, map=24, ascii=0, run_time=0:00:02:19)...[0m
[1;94m[*] [0mFuzzing test case #27 (28 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1187, hits=1, map=24, ascii=0, run_time=0:00:02:45)...[0m
[1;94m[*] [0mFuzzing test case #27 (28 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1380, weight=59, favorite=1, was_fuzzed=1, exec_us=1187, hits=1, map=24, ascii=0, run_time=0:00:02:45)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 29 new corpus items found, 45.95% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 2 min, 45 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
[1;94m[*] [0mFuzzing test case #29 (38 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1190, hits=4, map=22, ascii=0, run_time=0:00:03:42)...[0m
[1;94m[*] [0mFuzzing test case #30 (38 total, 0 crashes saved, state: started :-), mode=explore, perf_score=300, weight=43, favorite=1, was_fuzzed=0, exec_us=1188, hits=2, map=24, ascii=0, run_time=0:00:03:42)...[0m
[1;94m[*] [0mFuzzing test case #39 (40 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1168, hits=1, map=24, ascii=0, run_time=0:00:04:05)...[0m
[1;94m[*] [0mFuzzing test case #15 (40 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=66, favorite=1, was_fuzzed=1, exec_us=1969, hits=35, map=19, ascii=0, run_time=0:00:04:05)...[0m
[1;94m[*] [0mFuzzing test case #39 (40 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1380, weight=58, favorite=1, was_fuzzed=1, exec_us=1168, hits=1, map=24, ascii=0, run_time=0:00:04:05)...[0m
[1;94m[*] [0mFuzzing test case #40 (44 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1161, hits=1, map=23, ascii=0, run_time=0:00:04:38)...[0m
[1;94m[*] [0mFuzzing test case #43 (44 total, 0 crashes saved, state: started :-), mode=explore, perf_score=450, weight=55, favorite=1, was_fuzzed=0, exec_us=1169, hits=1, map=25, ascii=0, run_time=0:00:04:39)...[0m
[1;94m[*] [0mFuzzing test case #15 (45 total, 0 crashes saved, state: in progress, mode=explore, perf_score=114, weight=66, favorite=1, was_fuzzed=1, exec_us=1969, hits=37, map=19, ascii=0, run_time=0:00:05:00)...[0m
[1;94m[*] [0mFuzzing test case #41 (45 total, 0 crashes saved, state: in progress, mode=explore, perf_score=450, weight=1, favorite=0, was_fuzzed=0, exec_us=1202, hits=40, map=24, ascii=0, run_time=0:00:05:00)...[0m
[1;94m[*] [0mFuzzing test case #15 (45 total, 0 crashes saved, state: in progress, mode=explore, perf_score=114, weight=64, favorite=1, was_fuzzed=1, exec_us=1969, hits=44, map=19, ascii=0, run_time=0:00:05:02)...[0m
[1;94m[*] [0mFuzzing test case #29 (45 total, 0 crashes saved, state: in progress, mode=explore, perf_score=1035, weight=15, favorite=1, was_fuzzed=1, exec_us=1190, hits=5, map=22, ascii=0, run_time=0:00:05:02)...[0m
[1;94m[*] [0mFuzzing test case #45 (47 total, 0 crashes saved, state: in progress, mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1164, hits=1, map=26, ascii=0, run_time=0:00:05:06)...[0m
[1;94m[*] [0mFuzzing test case #15 (47 total, 0 crashes saved, state: in progress, mode=explore, perf_score=114, weight=63, favorite=1, was_fuzzed=1, exec_us=1969, hits=47, map=19, ascii=0, run_time=0:00:05:06)...[0m
[1;94m[*] [0mFuzzing test case #27 (47 total, 0 crashes saved, state: in progress, mode=explore, perf_score=345, weight=7, favorite=1, was_fuzzed=1, exec_us=1187, hits=646, map=24, ascii=0, run_time=0:00:05:33)...[0m
[1;94m[*] [0mFuzzing test case #17 (47 total, 0 crashes saved, state: in progress, mode=explore, perf_score=172, weight=7, favorite=1, was_fuzzed=1, exec_us=1254, hits=145, map=19, ascii=0, run_time=0:00:05:34)...[0m
[1;94m[*] [0mFuzzing test case #29 (48 total, 0 crashes saved, state: in progress, mode=explore, perf_score=345, weight=8, favorite=1, was_fuzzed=1, exec_us=1190, hits=127, map=22, ascii=0, run_time=0:00:05:35)...[0m
[1;94m[*] [0mFuzzing test case #48 (51 total, 0 crashes saved, state: in progress, mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1203, hits=1, map=26, ascii=0, run_time=0:00:05:36)...[0m
[1;94m[*] [0mFuzzing test case #15 (51 total, 0 crashes saved, state: in progress, mode=explore, perf_score=114, weight=63, favorite=1, was_fuzzed=1, exec_us=1969, hits=49, map=19, ascii=0, run_time=0:00:05:36)...[0m
[1;94m[*] [0mFuzzing test case #40 (51 total, 0 crashes saved, state: in progress, mode=explore, perf_score=1552, weight=31, favorite=1, was_fuzzed=1, exec_us=1161, hits=7, map=23, ascii=0, run_time=0:00:05:37)...[0m
[1;94m[*] [0mFuzzing test case #15 (52 total, 0 crashes saved, state: in progress, mode=explore, perf_score=114, weight=63, favorite=1, was_fuzzed=1, exec_us=1969, hits=51, map=19, ascii=0, run_time=0:00:06:06)...[0m
[1;94m[*] [0mFuzzing test case #48 (52 total, 0 crashes saved, state: in progress, mode=explore, perf_score=1380, weight=26, favorite=1, was_fuzzed=1, exec_us=1203, hits=1, map=26, ascii=0, run_time=0:00:06:07)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 53 new corpus items found, 48.65% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 6 min, 8 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
