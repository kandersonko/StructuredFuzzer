JOB timestamp: Mon Dec 18 15:28:05 MST 2023
JOB ID: 121631
Array Task ID: 20
Current directory: /lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src
r3i4n10
gcc (Spack GCC) 12.1.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Python 3.11.5
/lfs/koff9454.ui/miniconda3/envs/plc/bin/python
matiec version 0.1
changeset id: 
Number of programs: 3
Programs: condition_1 condition_2 condition_3
Fuzzing program: condition_3, Job ID: 20
input dir exist, skipping
harness file exist, skipping
Running the fuzzers
Workdir: "/lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src/programs/condition/condition_3/runs/run-20"
Out dir at "fuzzer-outdir" already exists.
Let's fuzz :)
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 3 runnable tasks (utilization: 8%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #3.[0m
[1;94m[*] [0mScanning 'our-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 75[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'our-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 80 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 6 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:variables.txt'...[0m
[1;90m    len = 560, map size = 23, exec speed = 7028 us, hash = 9b4849e5a795fa70
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m23 to 23 bits (average: 23.00 bits)
[1;90m        Exec timing : [0m7028 to 7028 us (average: 7028 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 40 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=7028, hits=0, map=23, ascii=0, run_time=0:00:00:00)...[0m
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 5 runnable tasks (utilization: 14%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #6.[0m
[1;94m[*] [0mScanning 'afl-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 75[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'afl-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 80 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 6 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:testcase.txt'...[0m
[1;90m    len = 3, map size = 22, exec speed = 5906 us, hash = f12e82753eb161b5
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m22 to 22 bits (average: 22.00 bits)
[1;90m        Exec timing : [0m5906 to 5906 us (average: 5906 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 40 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=5906, hits=0, map=22, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #1 (2 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=3453, hits=2, map=23, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #1 (2 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=16, favorite=1, was_fuzzed=1, exec_us=3453, hits=2, map=23, ascii=0, run_time=0:00:00:00)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 22 new corpus items found, 48.00% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 0 min, 41 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
[1;94m[*] [0mFuzzing test case #4 (10 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=4413, hits=41, map=22, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #1 (10 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=19, favorite=1, was_fuzzed=1, exec_us=3453, hits=3537, map=23, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #13 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1249, hits=1, map=25, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #1 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=19, favorite=1, was_fuzzed=1, exec_us=3453, hits=3593, map=23, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #1 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=19, favorite=1, was_fuzzed=1, exec_us=3453, hits=3634, map=23, ascii=0, run_time=0:00:01:20)...[0m
[1;94m[*] [0mFuzzing test case #13 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=919, weight=28, favorite=1, was_fuzzed=1, exec_us=1249, hits=1, map=25, ascii=0, run_time=0:00:01:20)...[0m
[1;94m[*] [0mFuzzing test case #22 (23 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1195, hits=1, map=26, ascii=0, run_time=0:00:02:19)...[0m
[1;94m[*] [0mFuzzing test case #18 (23 total, 0 crashes saved, state: started :-), mode=explore, perf_score=300, weight=62, favorite=1, was_fuzzed=0, exec_us=1185, hits=3, map=26, ascii=0, run_time=0:00:02:19)...[0m
[1;94m[*] [0mFuzzing test case #23 (26 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1172, hits=2, map=26, ascii=0, run_time=0:00:02:47)...[0m
[1;94m[*] [0mFuzzing test case #1 (26 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=19, favorite=1, was_fuzzed=1, exec_us=3453, hits=3782, map=23, ascii=0, run_time=0:00:02:47)...[0m
[1;94m[*] [0mFuzzing test case #22 (26 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1380, weight=23, favorite=1, was_fuzzed=1, exec_us=1195, hits=1, map=26, ascii=0, run_time=0:00:02:47)...[0m
[1;94m[*] [0mFuzzing test case #27 (39 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1190, hits=3, map=29, ascii=0, run_time=0:00:04:06)...[0m
[1;94m[*] [0mFuzzing test case #36 (39 total, 0 crashes saved, state: started :-), mode=explore, perf_score=300, weight=33, favorite=1, was_fuzzed=0, exec_us=1166, hits=2, map=27, ascii=0, run_time=0:00:04:06)...[0m
[1;94m[*] [0mFuzzing test case #31 (40 total, 0 crashes saved, state: started :-), mode=explore, perf_score=300, weight=42, favorite=1, was_fuzzed=0, exec_us=1162, hits=2, map=25, ascii=0, run_time=0:00:04:07)...[0m
[1;94m[*] [0mFuzzing test case #39 (41 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1146, hits=1, map=27, ascii=0, run_time=0:00:04:08)...[0m
[1;94m[*] [0mFuzzing test case #30 (41 total, 0 crashes saved, state: started :-), mode=explore, perf_score=300, weight=29, favorite=1, was_fuzzed=0, exec_us=1131, hits=3, map=25, ascii=0, run_time=0:00:04:08)...[0m
[1;94m[*] [0mFuzzing test case #32 (43 total, 0 crashes saved, state: started :-), mode=explore, perf_score=200, weight=42, favorite=1, was_fuzzed=0, exec_us=1179, hits=1, map=26, ascii=0, run_time=0:00:04:33)...[0m
[1;94m[*] [0mFuzzing test case #43 (45 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1144, hits=1, map=25, ascii=0, run_time=0:00:04:34)...[0m
[1;94m[*] [0mFuzzing test case #18 (45 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=13, favorite=1, was_fuzzed=1, exec_us=1185, hits=321, map=26, ascii=0, run_time=0:00:04:34)...[0m
[1;94m[*] [0mFuzzing test case #43 (45 total, 0 crashes saved, state: started :-), mode=explore, perf_score=919, weight=21, favorite=1, was_fuzzed=1, exec_us=1144, hits=1, map=25, ascii=0, run_time=0:00:04:35)...[0m
[1;94m[*] [0mFuzzing test case #47 (48 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1139, hits=1, map=29, ascii=0, run_time=0:00:04:40)...[0m
[1;94m[*] [0mFuzzing test case #27 (48 total, 0 crashes saved, state: started :-), mode=explore, perf_score=690, weight=21, favorite=1, was_fuzzed=1, exec_us=1190, hits=4, map=29, ascii=0, run_time=0:00:04:40)...[0m
[1;94m[*] [0mFuzzing test case #39 (48 total, 0 crashes saved, state: in progress, mode=explore, perf_score=919, weight=22, favorite=1, was_fuzzed=1, exec_us=1146, hits=1, map=27, ascii=0, run_time=0:00:05:01)...[0m
[1;94m[*] [0mFuzzing test case #47 (49 total, 0 crashes saved, state: in progress, mode=explore, perf_score=919, weight=22, favorite=1, was_fuzzed=1, exec_us=1139, hits=1, map=29, ascii=0, run_time=0:00:05:06)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 50 new corpus items found, 49.33% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 5 min, 6 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
