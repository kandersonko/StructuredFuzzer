JOB timestamp: Mon Dec 18 15:28:05 MST 2023
JOB ID: 121635
Array Task ID: 24
Current directory: /lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src
r3i4n10
gcc (Spack GCC) 12.1.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Python 3.11.5
/lfs/koff9454.ui/miniconda3/envs/plc/bin/python
matiec version 0.1
changeset id: 
Number of programs: 3
Programs: condition_1 condition_2 condition_3
Fuzzing program: condition_1, Job ID: 24
input dir exist, skipping
harness file exist, skipping
Running the fuzzers
Workdir: "/lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src/programs/condition/condition_1/runs/run-24"
Out dir at "fuzzer-outdir" already exists.
Let's fuzz :)
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 4 runnable tasks (utilization: 11%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #8.[0m
[1;94m[*] [0mScanning 'afl-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 68[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'afl-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 88 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 6 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:testcase.txt'...[0m
[1;90m    len = 3, map size = 18, exec speed = 4815 us, hash = dcecfe8b41bb142f
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m18 to 18 bits (average: 18.00 bits)
[1;90m        Exec timing : [0m4815 to 4815 us (average: 4815 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 40 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=4815, hits=0, map=18, ascii=0, run_time=0:00:00:00)...[0m
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 7 runnable tasks (utilization: 19%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #14.[0m
[1;94m[*] [0mScanning 'our-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 68[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'our-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 88 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 6 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:variables.txt'...[0m
[1;90m    len = 616, map size = 19, exec speed = 1494 us, hash = 64e735e0cc07a8c6
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m19 to 19 bits (average: 19.00 bits)
[1;90m        Exec timing : [0m1494 to 1494 us (average: 1494 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 20 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1494, hits=0, map=19, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=10, favorite=1, was_fuzzed=1, exec_us=4815, hits=0, map=18, ascii=0, run_time=0:00:00:00)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 23 new corpus items found, 47.06% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 0 min, 46 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
[1;94m[*] [0mFuzzing test case #2 (10 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=3519, hits=53, map=18, ascii=0, run_time=0:00:01:18)...[0m
[1;94m[*] [0mFuzzing test case #6 (10 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=8, favorite=1, was_fuzzed=0, exec_us=3630, hits=9, map=18, ascii=0, run_time=0:00:01:18)...[0m
[1;94m[*] [0mFuzzing test case #1 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=5, favorite=1, was_fuzzed=0, exec_us=2766, hits=960, map=19, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #2 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=19, favorite=1, was_fuzzed=1, exec_us=3519, hits=83, map=18, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #2 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=19, favorite=1, was_fuzzed=1, exec_us=3519, hits=123, map=18, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #1 (14 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=2, favorite=1, was_fuzzed=1, exec_us=2766, hits=1019, map=19, ascii=0, run_time=0:00:01:19)...[0m
[1;94m[*] [0mFuzzing test case #2 (15 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=18, favorite=1, was_fuzzed=1, exec_us=3519, hits=139, map=18, ascii=0, run_time=0:00:01:20)...[0m
[1;94m[*] [0mFuzzing test case #6 (15 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=3, favorite=1, was_fuzzed=1, exec_us=3630, hits=18, map=18, ascii=0, run_time=0:00:01:20)...[0m
[1;94m[*] [0mFuzzing test case #6 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=3, favorite=1, was_fuzzed=1, exec_us=3630, hits=45, map=18, ascii=0, run_time=0:00:01:47)...[0m
[1;94m[*] [0mFuzzing test case #2 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=17, favorite=1, was_fuzzed=1, exec_us=3519, hits=342, map=18, ascii=0, run_time=0:00:01:47)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=5, favorite=1, was_fuzzed=1, exec_us=4815, hits=0, map=18, ascii=0, run_time=0:00:01:47)...[0m
[1;94m[*] [0mFuzzing test case #1 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=2, favorite=1, was_fuzzed=1, exec_us=2766, hits=1177, map=19, ascii=0, run_time=0:00:01:48)...[0m
[1;94m[*] [0mFuzzing test case #2 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=17, favorite=1, was_fuzzed=1, exec_us=3519, hits=355, map=18, ascii=0, run_time=0:00:01:48)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=5, favorite=1, was_fuzzed=1, exec_us=4815, hits=0, map=18, ascii=0, run_time=0:00:01:49)...[0m
[1;94m[*] [0mFuzzing test case #2 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=17, favorite=1, was_fuzzed=1, exec_us=3519, hits=368, map=18, ascii=0, run_time=0:00:01:49)...[0m
[1;94m[*] [0mFuzzing test case #16 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1184, hits=1, map=18, ascii=0, run_time=0:00:01:49)...[0m
[1;94m[*] [0mFuzzing test case #16 (17 total, 0 crashes saved, state: started :-), mode=explore, perf_score=690, weight=168, favorite=1, was_fuzzed=1, exec_us=1184, hits=1, map=18, ascii=0, run_time=0:00:01:49)...[0m
[1;94m[*] [0mFuzzing test case #17 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1174, hits=7, map=18, ascii=0, run_time=0:00:02:16)...[0m
[1;94m[*] [0mFuzzing test case #18 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=300, weight=26, favorite=1, was_fuzzed=0, exec_us=1181, hits=3, map=18, ascii=0, run_time=0:00:02:16)...[0m
[1;94m[*] [0mFuzzing test case #17 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1035, weight=86, favorite=1, was_fuzzed=1, exec_us=1174, hits=8, map=18, ascii=0, run_time=0:00:02:17)...[0m
[1;94m[*] [0mFuzzing test case #16 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=172, weight=5, favorite=1, was_fuzzed=1, exec_us=1184, hits=333, map=18, ascii=0, run_time=0:00:02:45)...[0m
[1;94m[*] [0mFuzzing test case #17 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1035, weight=86, favorite=1, was_fuzzed=1, exec_us=1174, hits=49, map=18, ascii=0, run_time=0:00:02:46)...[0m
[1;94m[*] [0mEntering queue cycle 2.[0m
[1;94m[*] [0mFuzzing test case #18 (19 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1035, weight=9, favorite=1, was_fuzzed=1, exec_us=1181, hits=19, map=18, ascii=0, run_time=0:00:02:49)...[0m
[1;94m[*] [0mFuzzing test case #19 (22 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1153, hits=7, map=22, ascii=0, run_time=0:00:03:14)...[0m
[1;94m[*] [0mFuzzing test case #17 (22 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=50, favorite=1, was_fuzzed=1, exec_us=1174, hits=113, map=18, ascii=0, run_time=0:00:03:14)...[0m
[1;94m[*] [0mFuzzing test case #16 (22 total, 0 crashes saved, state: started :-), mode=explore, perf_score=172, weight=5, favorite=1, was_fuzzed=1, exec_us=1184, hits=343, map=18, ascii=0, run_time=0:00:03:15)...[0m
[1;94m[*] [0mFuzzing test case #17 (22 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=48, favorite=1, was_fuzzed=1, exec_us=1174, hits=152, map=18, ascii=0, run_time=0:00:03:16)...[0m
[1;94m[*] [0mFuzzing test case #17 (23 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=49, favorite=1, was_fuzzed=1, exec_us=1174, hits=158, map=18, ascii=0, run_time=0:00:03:37)...[0m
[1;94m[*] [0mFuzzing test case #19 (23 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1035, weight=18, favorite=1, was_fuzzed=1, exec_us=1153, hits=13, map=22, ascii=0, run_time=0:00:03:37)...[0m
[1;94m[*] [0mFuzzing test case #19 (23 total, 0 crashes saved, state: started :-), mode=explore, perf_score=1035, weight=18, favorite=1, was_fuzzed=1, exec_us=1153, hits=248, map=22, ascii=0, run_time=0:00:03:41)...[0m
[1;94m[*] [0mFuzzing test case #23 (24 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1118, hits=1, map=20, ascii=0, run_time=0:00:04:06)...[0m
[1;94m[*] [0mFuzzing test case #23 (24 total, 0 crashes saved, state: started :-), mode=explore, perf_score=2760, weight=36, favorite=1, was_fuzzed=1, exec_us=1118, hits=1, map=20, ascii=0, run_time=0:00:04:06)...[0m
[1;94m[*] [0mFuzzing test case #26 (29 total, 0 crashes saved, state: in progress, mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1135, hits=11, map=18, ascii=0, run_time=0:00:05:35)...[0m
[1;94m[*] [0mFuzzing test case #24 (29 total, 0 crashes saved, state: in progress, mode=explore, perf_score=400, weight=17, favorite=1, was_fuzzed=0, exec_us=1135, hits=13, map=20, ascii=0, run_time=0:00:05:35)...[0m
[1;94m[*] [0mFuzzing test case #25 (35 total, 0 crashes saved, state: in progress, mode=explore, perf_score=400, weight=18, favorite=1, was_fuzzed=0, exec_us=1122, hits=9, map=20, ascii=0, run_time=0:00:05:38)...[0m
[1;94m[*] [0mFuzzing test case #0 (35 total, 0 crashes saved, state: in progress, mode=explore, perf_score=229, weight=4, favorite=1, was_fuzzed=1, exec_us=4815, hits=0, map=18, ascii=0, run_time=0:00:05:40)...[0m
[1;94m[*] [0mFuzzing test case #18 (35 total, 0 crashes saved, state: in progress, mode=explore, perf_score=229, weight=5, favorite=1, was_fuzzed=1, exec_us=1181, hits=107, map=18, ascii=0, run_time=0:00:05:40)...[0m
[1;94m[*] [0mFuzzing test case #23 (35 total, 0 crashes saved, state: in progress, mode=explore, perf_score=229, weight=11, favorite=1, was_fuzzed=1, exec_us=1118, hits=194, map=20, ascii=0, run_time=0:00:05:41)...[0m
[1;94m[*] [0mFuzzing test case #17 (37 total, 0 crashes saved, state: in progress, mode=explore, perf_score=229, weight=49, favorite=1, was_fuzzed=1, exec_us=1174, hits=342, map=18, ascii=0, run_time=0:00:06:05)...[0m
[1;94m[*] [0mFuzzing test case #24 (37 total, 0 crashes saved, state: in progress, mode=explore, perf_score=459, weight=8, favorite=1, was_fuzzed=1, exec_us=1135, hits=17, map=20, ascii=0, run_time=0:00:06:06)...[0m
[1;94m[*] [0mFuzzing test case #17 (37 total, 0 crashes saved, state: in progress, mode=explore, perf_score=229, weight=49, favorite=1, was_fuzzed=1, exec_us=1174, hits=361, map=18, ascii=0, run_time=0:00:06:08)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 36 new corpus items found, 45.59% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 6 min, 8 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
