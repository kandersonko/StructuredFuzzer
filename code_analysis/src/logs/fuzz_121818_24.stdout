JOB timestamp: Tue Dec 19 10:49:39 MST 2023
JOB ID: 121843
Array Task ID: 24
Current directory: /lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src
r3i4n10
gcc (Spack GCC) 12.1.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Python 3.11.5
/lfs/koff9454.ui/miniconda3/envs/plc/bin/python
matiec version 0.1
changeset id: 
Number of programs: 3
Programs: depth_1 depth_2 depth_3
Fuzzing program: depth_1, Job ID: 24
input dir exist, skipping
harness file exist, skipping
Running the fuzzers
Workdir: "/lfs/koff9454.ui/projects/plc_runtime_fuzzer/code_analysis/src/programs/depth/depth_1/runs/run-24"
Out dir at "fuzzer-outdir" already exists.
Let's fuzz :)
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 10 runnable tasks (utilization: 28%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #2.[0m
[1;94m[*] [0mScanning 'afl-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 59[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'afl-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 66 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 5 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:testcase.txt'...[0m
[1;90m    len = 3, map size = 16, exec speed = 1295 us, hash = 26782fe75b855ca7
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m16 to 16 bits (average: 16.00 bits)
[1;90m        Exec timing : [0m1295 to 1295 us (average: 1295 us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 20 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #1 (2 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1183, hits=2, map=17, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #0 (2 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=14, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:00)...[0m
[1;92m[+] [0mEnabled environment variable AFL_BENCH_UNTIL_CRASH with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_IGNORE_SEED_PROBLEMS with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_SKIP_CPUFREQ with value 1[0m
[1;92m[+] [0mEnabled environment variable AFL_TRY_AFFINITY with value 1[0m
[1;93m[!] [1;97mWARNING: [0mPotentially mistyped AFL environment variable: USE_PCM_DB=2, did you mean AFL_USE_PCM_DB=2?[0m
[0;36mafl-fuzz++4.09a[0m based on afl by Michal Zalewski and a large online community
[1;92m[+] [0mAFL++ is maintained by Marc "van Hauser" Heuse, Dominik Maier, Andrea Fioraldi and Heiko "hexcoder" EiÃŸfeldt[0m
[1;92m[+] [0mAFL++ is open source, get it at https://github.com/AFLplusplus/AFLplusplus[0m
[1;92m[+] [0mNOTE: AFL++ >= v3 has changed defaults and behaviours - see README.md[0m
[1;92m[+] [0mNo -M/-S set, autoconfiguring for "-S default"[0m
[1;94m[*] [0mGetting to work...[0m
[1;92m[+] [0mUsing exponential power schedule (FAST)[0m
[1;92m[+] [0mEnabled testcache with 50 MB[0m
[1;92m[+] [0mGenerating fuzz data with a length of min=1 max=1048576[0m
[1;94m[*] [0mChecking core_pattern...[0m

[1;91m[-] [0mHmm, your system is configured to send core dump notifications to an
    external utility. This will cause issues: there will be an extended delay
    between stumbling upon a crash and having this information relayed to the
    fuzzer via the standard waitpid() API.
    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.

    To avoid having crashes misinterpreted as timeouts, please log in as root
    and temporarily modify /proc/sys/kernel/core_pattern, like so:

    echo core >/proc/sys/kernel/core_pattern
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 36 CPU cores and 8 runnable tasks (utilization: 22%).[0m
[1;92m[+] [0mTry parallel jobs - see /usr/local/share/doc/afl/fuzzing_in_depth.md#c-using-multiple-cores[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, try binding to #0.[0m
[1;94m[*] [0mScanning 'our-indir'...[0m
[1;92m[+] [0mLoaded a total of 1 seeds.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
[1;92m[+] [0mAll right - fork server is up.[0m
[1;94m[*] [0mTarget map size: 59[0m
[1;94m[*] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mLoading extra dictionary from 'our-inputs.dict' (level 0)...[0m
[1;94m[*] [0mLoaded 66 extra tokens, size range 4 B to 6 B.[0m
[1;92m[+] [0mLoaded a total of 5 extras.[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,time:0,execs:0,orig:variables.txt'...[0m
[1;90m    len = 308, map size = 17, exec speed = 11950 us, hash = d7117ca9a15ca271
[0m[1;92m[+] [0mAll test cases processed.[0m
[1;93m[!] [1;97mWARNING: [0m[1;91mThe target binary is pretty slow! See /usr/local/share/doc/afl/fuzzing_in_depth.md#i-improve-the-speed[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m1 favored, 0 variable, 0 ignored, 1 total
[1;90m       Bitmap range : [0m17 to 17 bits (average: 17.00 bits)
[1;90m        Exec timing : [0m11.9k to 11.9k us (average: 11.9k us)
[0m
[1;94m[*] [0mNo -t option specified, so I'll use an exec timeout of 40 ms.[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #0 (1 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=11950, hits=0, map=17, ascii=0, run_time=0:00:00:00)...[0m
[1;94m[*] [0mFuzzing test case #5 (10 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1122, hits=14, map=18, ascii=0, run_time=0:00:00:08)...[0m
[1;94m[*] [0mFuzzing test case #7 (10 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=1, favorite=0, was_fuzzed=0, exec_us=1127, hits=5, map=17, ascii=0, run_time=0:00:00:08)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:09)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:09)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:10)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:10)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:11)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:12)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:12)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:13)...[0m
[1;94m[*] [0mFuzzing test case #0 (13 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=54, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:13)...[0m
[1;94m[*] [0mFuzzing test case #14 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1128, hits=1, map=19, ascii=0, run_time=0:00:00:18)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=61, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:18)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=61, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:18)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=61, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:19)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=61, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:19)...[0m
[1;94m[*] [0mFuzzing test case #0 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=61, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:20)...[0m
[1;94m[*] [0mFuzzing test case #14 (16 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=9, favorite=1, was_fuzzed=1, exec_us=1128, hits=3, map=19, ascii=0, run_time=0:00:00:20)...[0m
[1;94m[*] [0mFuzzing test case #23 (27 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1133, hits=1, map=21, ascii=0, run_time=0:00:00:30)...[0m
[1;94m[*] [0mFuzzing test case #20 (27 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=13, favorite=1, was_fuzzed=0, exec_us=1152, hits=4, map=18, ascii=0, run_time=0:00:00:30)...[0m
[1;94m[*] [0mFuzzing test case #25 (27 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=21, favorite=1, was_fuzzed=0, exec_us=1111, hits=1, map=18, ascii=0, run_time=0:00:00:31)...[0m
[1;94m[*] [0mFuzzing test case #17 (29 total, 0 crashes saved, state: started :-), mode=explore, perf_score=100, weight=13, favorite=1, was_fuzzed=0, exec_us=1168, hits=4, map=21, ascii=0, run_time=0:00:00:31)...[0m
[1;94m[*] [0mFuzzing test case #0 (29 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=81, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:31)...[0m
[1;94m[*] [0mFuzzing test case #25 (29 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=6, favorite=1, was_fuzzed=1, exec_us=1111, hits=5, map=18, ascii=0, run_time=0:00:00:32)...[0m
[1;94m[*] [0mFuzzing test case #29 (32 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1156, hits=1, map=19, ascii=0, run_time=0:00:00:34)...[0m
[1;94m[*] [0mFuzzing test case #0 (32 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=86, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:34)...[0m
[1;94m[*] [0mFuzzing test case #17 (32 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=11, favorite=1, was_fuzzed=1, exec_us=1168, hits=16, map=21, ascii=0, run_time=0:00:00:35)...[0m
[1;94m[*] [0mFuzzing test case #0 (32 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=86, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:36)...[0m
[1;94m[*] [0mFuzzing test case #29 (32 total, 0 crashes saved, state: started :-), mode=explore, perf_score=919, weight=11, favorite=1, was_fuzzed=1, exec_us=1156, hits=1, map=19, ascii=0, run_time=0:00:00:36)...[0m
[1;94m[*] [0mFuzzing test case #34 (35 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1146, hits=1, map=22, ascii=0, run_time=0:00:00:43)...[0m
[1;94m[*] [0mFuzzing test case #0 (35 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=90, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:43)...[0m
[1;94m[*] [0mFuzzing test case #0 (35 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=90, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:44)...[0m
[1;94m[*] [0mFuzzing test case #0 (35 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=90, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:44)...[0m
[1;94m[*] [0mFuzzing test case #17 (35 total, 0 crashes saved, state: started :-), mode=explore, perf_score=229, weight=10, favorite=1, was_fuzzed=1, exec_us=1168, hits=23, map=21, ascii=0, run_time=0:00:00:45)...[0m
[1;94m[*] [0mFuzzing test case #23 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=345, weight=8, favorite=1, was_fuzzed=1, exec_us=1133, hits=4, map=21, ascii=0, run_time=0:00:00:46)...[0m
[1;94m[*] [0mFuzzing test case #0 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=93, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:47)...[0m
[1;94m[*] [0mFuzzing test case #0 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=93, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:47)...[0m
[1;94m[*] [0mFuzzing test case #0 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=93, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:48)...[0m
[1;94m[*] [0mFuzzing test case #0 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=93, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:48)...[0m
[1;94m[*] [0mFuzzing test case #0 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=93, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:49)...[0m
[1;94m[*] [0mFuzzing test case #17 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=114, weight=10, favorite=1, was_fuzzed=1, exec_us=1168, hits=39, map=21, ascii=0, run_time=0:00:00:49)...[0m
[1;94m[*] [0mEntering queue cycle 2.[0m
[1;94m[*] [0mFuzzing test case #0 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=459, weight=93, favorite=1, was_fuzzed=1, exec_us=1295, hits=0, map=16, ascii=0, run_time=0:00:00:50)...[0m
[1;94m[*] [0mFuzzing test case #34 (36 total, 0 crashes saved, state: started :-), mode=explore, perf_score=919, weight=12, favorite=1, was_fuzzed=1, exec_us=1146, hits=1, map=22, ascii=0, run_time=0:00:00:51)...[0m
[1;94m[*] [0mFuzzing test case #37 (44 total, 0 crashes saved, state: started :-), mode=explore, perf_score=0, weight=0, favorite=1, was_fuzzed=0, exec_us=1187, hits=7, map=20, ascii=0, run_time=0:00:01:02)...[0m
[1;94m[*] [0mFuzzing test case #39 (44 total, 0 crashes saved, state: started :-), mode=explore, perf_score=400, weight=26, favorite=1, was_fuzzed=0, exec_us=1107, hits=1, map=22, ascii=0, run_time=0:00:01:02)...[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 45 new corpus items found, 52.54% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 1 min, 3 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
[?25h[1;91m

+++ Testing aborted programmatically +++
[0m[1;94m[*] [0mStatistics: 26 new corpus items found, 50.85% coverage achieved, 1 crashes saved, 0 timeouts saved, total runtime 0 days, 0 hrs, 1 min, 11 sec[0m
[1;92m[+] [0mWe're done here. Have a nice day!
[0m
