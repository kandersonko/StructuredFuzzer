JOB timestamp: Fri Dec  8 07:14:24 PST 2023
JOB ID: 4677095
Array Task ID: 2
n073.fortytwo.ibest.uidaho.edu
# conda environments:
#
base                     /mnt/ceph/koff9454/miniconda3
aml                      /mnt/ceph/koff9454/miniconda3/envs/aml
angr                     /mnt/ceph/koff9454/miniconda3/envs/angr
fuzzing                  /mnt/ceph/koff9454/miniconda3/envs/fuzzing
plc                   *  /mnt/ceph/koff9454/miniconda3/envs/plc
pytorch                  /mnt/ceph/koff9454/miniconda3/envs/pytorch
torch                    /mnt/ceph/koff9454/miniconda3/envs/torch
usb                      /mnt/ceph/koff9454/miniconda3/envs/usb

gcc (GCC) 11.3.0
Copyright (C) 2021 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Python 3.11.5
/mnt/ceph/koff9454/miniconda3/envs/plc/bin/python
Fuzzing program: complex_2
(source_file (program_definition program_name: (identifier) (variable_definition (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment)) (block_comment) (if_statement condition: (binary_expression (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (integer)) (binary_expression (variable name: (identifier)) (floating_point)))) (parenthesis_expression (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (unary_expression (integer))) (block_comment) (block_comment) (elseif_clause condition: (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (floating_point)) (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment) (else_clause (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment))) (configuration (identifier) (resource (identifier) (task (identifier) (time) (integer)) (program_instance (identifier) (identifier) (identifier)))))
variable_name:  conveyorBeltSpeed
variable_type:  INT
variable_address:  %IW0.0

variable_name:  temperatureSensor
variable_type:  REAL
variable_address:  %ID0.0

variable_name:  pressureSensor
variable_type:  REAL
variable_address:  %ID0.1

variable_name:  safetyOverride
variable_type:  BOOL
variable_address:  %QX0.0

variable_name:  systemStatus
variable_type:  INT
variable_address:  %QW0.0

visit_assignment:  (assignment (variable name: (identifier)) (unary_expression (integer)))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus

variables:  {'conveyorBeltSpeed': ('INT', '%IW0.0'), 'temperatureSensor': ('REAL', '%ID0.0'), 'pressureSensor': ('REAL', '%ID0.1'), 'safetyOverride': ('BOOL', '%QX0.0'), 'systemStatus': ('INT', '%QW0.0')}
content:  %IW0.0,INT,9

content:  %ID0.0,REAL,9

content:  %ID0.1,REAL,9

plc_inputs:  [{'name': '%IW0.0', 'type': 'INT', 'value': 9}, {'name': '%ID0.0', 'type': 'REAL', 'value': 9}, {'name': '%ID0.1', 'type': 'REAL', 'value': 9}]
plc_input_code:  #include "iec_std_lib.h"
#include "iec_types_all.h" 
#include <string.h>
#include <stdlib.h>
#include "/mnt/ceph/koff9454/projects/plc_runtime_fuzzer/runtime/inputs.h"

    
extern INT *__IW0_0;
extern REAL *__ID0_0;
extern REAL *__ID0_1;

void set_plc_input(const char *name, const char *type, PLC_Value value) {

    if (strcmp(name, "%IW0.0") == 0) {
        if (strcmp(type, "INT") == 0) {
            *__IW0_0 = (INT)value._INT;
        }
    } else

    if (strcmp(name, "%ID0.0") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_0 = (REAL)value._REAL;
        }
    } else

    if (strcmp(name, "%ID0.1") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_1 = (REAL)value._REAL;
        }
    }
}
(source_file (program_definition program_name: (identifier) (variable_definition (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment)) (block_comment) (if_statement condition: (binary_expression (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (integer)) (binary_expression (variable name: (identifier)) (floating_point)))) (parenthesis_expression (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (unary_expression (integer))) (block_comment) (block_comment) (elseif_clause condition: (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (floating_point)) (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment) (else_clause (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment))) (configuration (identifier) (resource (identifier) (task (identifier) (time) (integer)) (program_instance (identifier) (identifier) (identifier)))))
variable_name:  conveyorBeltSpeed
variable_type:  INT
variable_address:  %IW0.0

variable_name:  temperatureSensor
variable_type:  REAL
variable_address:  %ID0.0

variable_name:  pressureSensor
variable_type:  REAL
variable_address:  %ID0.1

variable_name:  safetyOverride
variable_type:  BOOL
variable_address:  %QX0.0

variable_name:  systemStatus
variable_type:  INT
variable_address:  %QW0.0

visit_assignment:  (assignment (variable name: (identifier)) (unary_expression (integer)))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus

variables:  {'conveyorBeltSpeed': ('INT', '%IW0.0'), 'temperatureSensor': ('REAL', '%ID0.0'), 'pressureSensor': ('REAL', '%ID0.1'), 'safetyOverride': ('BOOL', '%QX0.0'), 'systemStatus': ('INT', '%QW0.0')}
content:  %IW0.0,INT,9

content:  %ID0.0,REAL,9

content:  %ID0.1,REAL,9

plc_inputs:  [{'name': '%IW0.0', 'type': 'INT', 'value': 9}, {'name': '%ID0.0', 'type': 'REAL', 'value': 9}, {'name': '%ID0.1', 'type': 'REAL', 'value': 9}]
plc_input_code:  #include "iec_std_lib.h"
#include "iec_types_all.h" 
#include <string.h>
#include <stdlib.h>
#include "/mnt/ceph/koff9454/projects/plc_runtime_fuzzer/runtime/inputs.h"

    
extern INT *__IW0_0;
extern REAL *__ID0_0;
extern REAL *__ID0_1;

void set_plc_input(const char *name, const char *type, PLC_Value value) {

    if (strcmp(name, "%IW0.0") == 0) {
        if (strcmp(type, "INT") == 0) {
            *__IW0_0 = (INT)value._INT;
        }
    } else

    if (strcmp(name, "%ID0.0") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_0 = (REAL)value._REAL;
        }
    } else

    if (strcmp(name, "%ID0.1") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_1 = (REAL)value._REAL;
        }
    }
}
~/projects/plc_runtime_fuzzer/runtime ~/projects/plc_runtime_fuzzer/code_analysis/src/programs/complex_2
~/projects/plc_runtime_fuzzer/runtime ~/projects/plc_runtime_fuzzer/code_analysis/src/programs/complex_2
(source_file (program_definition program_name: (identifier) (variable_definition (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment)) (block_comment) (if_statement condition: (binary_expression (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (integer)) (binary_expression (variable name: (identifier)) (floating_point)))) (parenthesis_expression (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (unary_expression (integer))) (block_comment) (block_comment) (elseif_clause condition: (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (floating_point)) (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment) (else_clause (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment))) (configuration (identifier) (resource (identifier) (task (identifier) (time) (integer)) (program_instance (identifier) (identifier) (identifier)))))
variable_name:  conveyorBeltSpeed
variable_type:  INT
variable_address:  %IW0.0

variable_name:  temperatureSensor
variable_type:  REAL
variable_address:  %ID0.0

variable_name:  pressureSensor
variable_type:  REAL
variable_address:  %ID0.1

variable_name:  safetyOverride
variable_type:  BOOL
variable_address:  %QX0.0

variable_name:  systemStatus
variable_type:  INT
variable_address:  %QW0.0

visit_assignment:  (assignment (variable name: (identifier)) (unary_expression (integer)))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus

variables:  {'conveyorBeltSpeed': ('INT', '%IW0.0'), 'temperatureSensor': ('REAL', '%ID0.0'), 'pressureSensor': ('REAL', '%ID0.1'), 'safetyOverride': ('BOOL', '%QX0.0'), 'systemStatus': ('INT', '%QW0.0')}
content:  %IW0.0,INT,9

content:  %ID0.0,REAL,9

content:  %ID0.1,REAL,9

plc_inputs:  [{'name': '%IW0.0', 'type': 'INT', 'value': 9}, {'name': '%ID0.0', 'type': 'REAL', 'value': 9}, {'name': '%ID0.1', 'type': 'REAL', 'value': 9}]
plc_input_code:  #include "iec_std_lib.h"
#include "iec_types_all.h" 
#include <string.h>
#include <stdlib.h>
#include "/mnt/ceph/koff9454/projects/plc_runtime_fuzzer/runtime/inputs.h"

    
extern INT *__IW0_0;
extern REAL *__ID0_0;
extern REAL *__ID0_1;

void set_plc_input(const char *name, const char *type, PLC_Value value) {

    if (strcmp(name, "%IW0.0") == 0) {
        if (strcmp(type, "INT") == 0) {
            *__IW0_0 = (INT)value._INT;
        }
    } else

    if (strcmp(name, "%ID0.0") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_0 = (REAL)value._REAL;
        }
    } else

    if (strcmp(name, "%ID0.1") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_1 = (REAL)value._REAL;
        }
    }
}
(source_file (program_definition program_name: (identifier) (variable_definition (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment) (variable_definition_body name: (identifier) address: (address) type: (basic_data_type)) (block_comment)) (block_comment) (if_statement condition: (binary_expression (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (integer)) (binary_expression (variable name: (identifier)) (floating_point)))) (parenthesis_expression (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (unary_expression (integer))) (block_comment) (block_comment) (elseif_clause condition: (binary_expression (parenthesis_expression (binary_expression (binary_expression (variable name: (identifier)) (floating_point)) (binary_expression (variable name: (identifier)) (floating_point)))) (unary_expression (variable name: (identifier)))) (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment) (else_clause (assignment (variable name: (identifier)) (integer))) (block_comment) (block_comment))) (configuration (identifier) (resource (identifier) (task (identifier) (time) (integer)) (program_instance (identifier) (identifier) (identifier)))))
variable_name:  conveyorBeltSpeed
variable_type:  INT
variable_address:  %IW0.0

variable_name:  temperatureSensor
variable_type:  REAL
variable_address:  %ID0.0

variable_name:  pressureSensor
variable_type:  REAL
variable_address:  %ID0.1

variable_name:  safetyOverride
variable_type:  BOOL
variable_address:  %QX0.0

variable_name:  systemStatus
variable_type:  INT
variable_address:  %QW0.0

visit_assignment:  (assignment (variable name: (identifier)) (unary_expression (integer)))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus
visit_assignment:  (assignment (variable name: (identifier)) (integer))

variable name:  systemStatus

variables:  {'conveyorBeltSpeed': ('INT', '%IW0.0'), 'temperatureSensor': ('REAL', '%ID0.0'), 'pressureSensor': ('REAL', '%ID0.1'), 'safetyOverride': ('BOOL', '%QX0.0'), 'systemStatus': ('INT', '%QW0.0')}
content:  %IW0.0,INT,9

content:  %ID0.0,REAL,9

content:  %ID0.1,REAL,9

plc_inputs:  [{'name': '%IW0.0', 'type': 'INT', 'value': 9}, {'name': '%ID0.0', 'type': 'REAL', 'value': 9}, {'name': '%ID0.1', 'type': 'REAL', 'value': 9}]
plc_input_code:  #include "iec_std_lib.h"
#include "iec_types_all.h" 
#include <string.h>
#include <stdlib.h>
#include "/mnt/ceph/koff9454/projects/plc_runtime_fuzzer/runtime/inputs.h"

    
extern INT *__IW0_0;
extern REAL *__ID0_0;
extern REAL *__ID0_1;

void set_plc_input(const char *name, const char *type, PLC_Value value) {

    if (strcmp(name, "%IW0.0") == 0) {
        if (strcmp(type, "INT") == 0) {
            *__IW0_0 = (INT)value._INT;
        }
    } else

    if (strcmp(name, "%ID0.0") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_0 = (REAL)value._REAL;
        }
    } else

    if (strcmp(name, "%ID0.1") == 0) {
        if (strcmp(type, "REAL") == 0) {
            *__ID0_1 = (REAL)value._REAL;
        }
    }
}
POUS.c
POUS.h
LOCATED_VARIABLES.h
VARIABLES.csv
STD_CONF.c
STD_CONF.h
STD_RESSOURCE.c
POUS.c
POUS.h
LOCATED_VARIABLES.h
VARIABLES.csv
STD_CONF.c
STD_CONF.h
STD_RESSOURCE.c
